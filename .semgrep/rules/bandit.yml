rules:
- id: bandit.B101
  patterns:
  - pattern: assert(...)
  - pattern-not-inside: |
      import pytest
      ...
  - pattern-not-inside: |
      import unittest
      ...
  message: |
    Use of assert detected. The enclosed code will be removed when
    compiling to optimised byte code.
  metadata:
    cwe: "CWE-754: Improper Check for Unusual or Exceptional Conditions"
    primary_identifier: "bandit.B101"
    secondary_identifiers:
    - name: "Bandit Test ID B101"
      type: "bandit_test_id"
      value: "B101"
  severity: INFO
  languages: [python]
- id: bandit.B102
  pattern-either:
  - pattern: exec(...)
  - pattern: exec("...")
  message: |
    The use of `exec` is risky.
  metadata:
    cwe: "CWE-78: Improper Neutralization of Special Elements used in an OS Command
      ('OS Command Injection')"
    owasp: "A1: Injection"
    primary_identifier: "bandit.B102"
    secondary_identifiers:
    - name: "Bandit Test ID B102"
      type: "bandit_test_id"
      value: "B102"
  severity: WARNING
  languages: [python]
# https://github.com/returntocorp/semgrep-rules/blob/develop/python/lang/security/audit/insecure-file-permissions.yaml
# should subsume B103 but we have to set the flag --dangerously-allow-arbitrary-code-execution-from-rules
# - using metavariable-based approach for the time being
- id: bandit.B103
  patterns:
    - pattern: os.chmod(...,$MASK)
    - metavariable-regex:
        metavariable: "$MASK"
        regex: "(0x..f|0o..[2,3,7]|stat.S_IXGRP|stat.S_IWOTH)"
  message: 'Chmod setting a permissive mask on file.'
  metadata:
    cwe: "CWE-732: Incorrect Permission Assignment for Critical Resource"
    owasp: "A6: Security Misconfiguration"
    primary_identifier: "bandit.B103"
    secondary_identifiers:
    - name: "Bandit Test ID B103"
      type: "bandit_test_id"
      value: "B103"
  severity: WARNING
  languages: [python]
# source (original): https://github.com/returntocorp/semgrep-rules/blob/develop/python/lang/security/audit/network/bind.yaml
# avoid-bind-to-all-interfaces
- id: bandit.B104
  patterns:
  - pattern-either:
    - pattern: |
        $S = socket.socket(...)
        ...
        $S.bind(("0.0.0.0", ...))
    - pattern: |
        $S = socket.socket(...)
        ...
        $S.bind(("::", ...))
    - pattern: |
        $S = socket.socket(...)
        ...
        $S.bind(("", ...))
  message: |
    Running `socket.bind` to 0.0.0.0, ::, or empty string could unexpectedly
    expose the server publicly as it binds to all available interfaces. Consider
    instead getting correct address from an environment variable or
    configuration file.
  metadata:
    cwe: "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor"
    owasp: "A6: Security Misconfiguration"
    primary_identifier: "bandit.B104"
    secondary_identifiers:
    - name: "Bandit Test ID B104"
      type: "bandit_test_id"
      value: "B104"
  severity: INFO
  languages: [python]
- id: bandit.B105
  patterns:
    - pattern-either:
      - pattern: $MASK == "..."
      - pattern: $MASK = "..."
    - metavariable-regex:
        metavariable: "$MASK"
        regex: "[^\\[]*([Pp][Aa][Ss][Ss][Ww][Oo][Rr][Dd]|pass|passwd|pwd|secret|token|secrete)[^\\]]*"
  message: |
    Possible hardcoded password
  metadata:
    cwe: "CWE-259: Use of Hard-coded Password"
    owasp: "A3: Broken Authentication and Session Management"
    primary_identifier: "bandit.B105"
    secondary_identifiers:
    - name: "Bandit Test ID B105"
      type: "bandit_test_id"
      value: "B105"
  severity: INFO
  languages: [python]
- id: bandit.B106
  patterns:
    - pattern: $FUNC(..., $PW="...", ...)
    - metavariable-regex:
        metavariable: "$PW"
        regex: ".*([Pp][Aa][Ss][Ss][Ww][Oo][Rr][Dd]|pass|passwd|pwd|secret|token|secrete).*"
  message: |
    Possible hardcoded password
  metadata:
    cwe: "CWE-259: Use of Hard-coded Password"
    owasp: "A3: Broken Authentication and Session Management"
    primary_identifier: "bandit.B106"
    secondary_identifiers:
    - name: "Bandit Test ID B106"
      type: "bandit_test_id"
      value: "B106"
  severity: INFO
  languages: [python]
- id: "bandit.B113"
  patterns:
  - pattern-either:
    - patterns:
      - pattern: "requests.$METHOD('...', timeout=$VAL)"
      - metavariable-comparison:
          metavariable: "$VAL"
          comparison: "$VAL <= 0"
    - patterns:
      - pattern: "requests.$METHOD('...', timeout=$VAL)"
      - metavariable-regex:
          metavariable: "$VAL"
          regex: "(^None)"
    - patterns:
      - pattern-not: "requests.$METHOD('...', timeout=$VAL)"
      - pattern-either:
        - pattern: "requests.$METHOD('...', ...)"
        - pattern: "requests.$METHOD('...')"
  - metavariable-regex:
      metavariable: "$METHOD"
      regex: "(get|put|delete|post|options|head|patch)"
  message: |
    Requests call without timeout can cause your program to hang indefinitely.
  metadata:
    cwe: "CWE-400: Uncontrolled Resource Consumption"
    primary_identifier: "bandit.B113"
    secondary_identifiers:
    - name: "Bandit Test ID B113"
      type: "bandit_test_id"
      value: "B113"
  severity: "WARNING"
  languages:
  - "python"
# source (original): https://github.com/returntocorp/semgrep-rules/blob/develop/python/lang/security/audit/hardcoded-password-default-argument.yaml
# hardcoded-password-default-argument
- id: bandit.B107
  patterns:
  - pattern: |
      def $FUNC(..., password="...", ...):
        ...
  message: |
    Hardcoded password is used as a default argument to '$FUNC'. This could be dangerous if
    a real password is not supplied.
  metadata:
    cwe: "CWE-259: Use of Hard-coded Password"
    owasp: "A3: Broken Authentication and Session Management"
    primary_identifier: "bandit.B107"
    secondary_identifiers:
    - name: "Bandit Test ID B107"
      type: "bandit_test_id"
      value: "B107"
  severity: WARNING
  languages: [python]
# source (original): https://github.com/returntocorp/semgrep-rules/blob/develop/python/lang/best-practice/hardcoded-tmp-path.yaml
# hardcoded-tmp-path
- id: bandit.B108
  pattern: open("=~/^\/tmp.*/", ...)
  message: |
    Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.
  metadata:
    cwe: "CWE-377: Insecure Temporary File"
    primary_identifier: "bandit.B108"
    secondary_identifiers:
    - name: "Bandit Test ID B108"
      type: "bandit_test_id"
      value: "B108"
  severity: WARNING
  languages: [python]
- id: bandit.B108-2
  patterns:
    - pattern: "open($DIR, ...)"
    - metavariable-regex:
        metavariable: "$DIR"
        regex: "['\"](/tmp|/var/tmp|/dev/shm).*['\"]"
  message: |
    Probable insecure usage of temp file/directory.
  metadata:
    cwe: "CWE-377: Insecure Temporary File"
    primary_identifier: "bandit.B108-2"
    secondary_identifiers:
    - name: "Bandit Test ID B108"
      type: "bandit_test_id"
      value: "B108"
  severity: WARNING
  languages: [python]
- id: "bandit.B202"
  patterns:
  - pattern-inside: |
      import tarfile
      ...
  - pattern-either:
    - patterns:
      - pattern-inside: |
          $TAR = tarfile.open(...)
          ...
      - pattern-either:
        - pattern: "$TAR.extractall(...)"
        - pattern: "tarfile.extractall(..., members=$TAR)"
        - pattern: "$TAR.extractall(..., members=[])"
    - patterns:
      - pattern: "tarfile.extractall(...)"
      - pattern: "tarfile.extractall(..., members=[])"
  message: |
    tarfile.extractall used without any validation. You should check members and discard dangerous
    ones.
  metadata:
    cwe: "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path
      Traversal')"
    primary_identifier: "bandit.B202"
    secondary_identifiers:
    - name: "Bandit Test ID B202"
      type: "bandit_test_id"
      value: "B202"
  severity: "ERROR"
  languages:
  - "python"
- id: bandit.B201
  patterns:
  - pattern-inside: |
      import flask
      ...
  - pattern: $APP.run(..., debug=True, ...)
  message: |
    Detected Flask app with debug=True. Do not deploy to production with this flag enabled
    as it will leak sensitive information. Instead, consider using Flask configuration
    variables or setting 'debug' using system environment variables.
  metadata:
    cwe: "CWE-489: Active Debug Code"
    owasp: "A6: Security Misconfiguration"
    primary_identifier: "bandit.B201"
    secondary_identifiers:
    - name: "Bandit Test ID B201"
      type: "bandit_test_id"
      value: "B201"
  severity: WARNING
  languages: [python]
- id: "bandit.B112"
  pattern-either:
  - pattern: |
      try: ...
      except $EXCEPTION: continue
  - pattern: |
      try: ...
      except $EXCEPTION as $X: continue
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION: continue
  - pattern: |
      try: ...
      except $EXCEPTION: continue
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION as $X: continue
  - pattern: |
      try: ...
      except $EXCEPTION as $X: continue
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except $EXCEPTION: continue
  - pattern: |
      try: ...
      except $EXCEPTION: continue
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION: continue
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except $EXCEPTION as $X: continue
  - pattern: |
      try: ...
      except $EXCEPTION as $X: continue
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION as $X: continue
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except ... : ...
      except $EXCEPTION: continue
  - pattern: |
      try: ...
      except $EXCEPTION: continue
      except ... : ...
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION: continue
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except $EXCEPTION: continue
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except ... : ...
      except $EXCEPTION: continue
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except ... : ...
      except $EXCEPTION as $X: continue
  - pattern: |
      try: ...
      except $EXCEPTION as $X: continue
      except ... : ...
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION as $X: continue
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except $EXCEPTION as $X: continue
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except ... : ...
      except $EXCEPTION as $X: continue
  message: |
    Try, Except, Continue
  metadata:
    cwe: "CWE-703: Improper Check or Handling of Exceptional Conditions"
    primary_identifier: "bandit.B112"
    secondary_identifiers:
    - name: "Bandit Test ID B112"
      type: "bandit_test_id"
      value: "B112"
  severity: "INFO"
  languages:
  - "python"
- id: "bandit.B110"
  pattern-either:
  - pattern: |
      try: ...
      except $EXCEPTION: pass
  - pattern: |
      try: ...
      except $EXCEPTION as $X: pass
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION: pass
  - pattern: |
      try: ...
      except $EXCEPTION: pass
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION as $X: pass
  - pattern: |
      try: ...
      except $EXCEPTION as $X: pass
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except $EXCEPTION: pass
  - pattern: |
      try: ...
      except $EXCEPTION: pass
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION: pass
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except $EXCEPTION as $X: pass
  - pattern: |
      try: ...
      except $EXCEPTION as $X: pass
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION as $X: pass
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except ... : ...
      except $EXCEPTION: pass
  - pattern: |
      try: ...
      except $EXCEPTION: pass
      except ... : ...
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION: pass
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except $EXCEPTION: pass
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except ... : ...
      except $EXCEPTION: pass
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except ... : ...
      except $EXCEPTION as $X: pass
  - pattern: |
      try: ...
      except $EXCEPTION as $X: pass
      except ... : ...
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION as $X: pass
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except $EXCEPTION as $X: pass
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except ... : ...
      except $EXCEPTION as $X: pass
  message: |
    Try, Except, Pass
  metadata:
    cwe: "CWE-703: Improper Check or Handling of Exceptional Conditions"
    primary_identifier: "bandit.B110"
    secondary_identifiers:
    - name: "Bandit Test ID B110"
      type: "bandit_test_id"
      value: "B110"
  severity: "INFO"
  languages:
  - "python"
- id: "bandit.B415"
  pattern-either:
  - pattern: "import pyghmi"
  message: |
    An IPMI-related module is being imported. IPMI is considered insecure. Use an encrypted
    protocol.
  metadata:
    cisa: "https://www.cisa.gov/uscert/ncas/alerts/TA13-207A"
    primary_identifier: "bandit.B415"
    secondary_identifiers:
    - name: "Bandit Test ID B415"
      type: "bandit_test_id"
      value: "B415"
  severity: "ERROR"
  languages:
  - "python"
# source (original): https://github.com/returntocorp/semgrep-rules/blob/develop/python/lang/security/deserialization/pickle.yaml
# avoid-pickle
- id: bandit.B301-1
  pattern-either:
  - pattern: pickle.$FUNC(...)
  - pattern: _pickle.$FUNC(...)
  message: |
    Avoid using `pickle`, which is known to lead to code execution vulnerabilities.
    When unpickling, the serialized data could be manipulated to run arbitrary code.
    Instead, consider serializing the relevant data as JSON or a similar text-based
    serialization format.
  metadata:
    cwe: "CWE-502: Deserialization of Untrusted Data"
    owasp: "A8: Insecure Deserialization"
    primary_identifier: "bandit.B301-1"
    secondary_identifiers:
    - name: "Bandit Test ID B301-1"
      type: "bandit_test_id"
      value: "B301-1"
  severity: WARNING
  languages: [python]
# avoid-cPickle
- id: bandit.B301-2
  pattern: cPickle.$FUNC(...)
  message: |
    Avoid using `cPickle`, which is known to lead to code execution vulnerabilities.
    When unpickling, the serialized data could be manipulated to run arbitrary code.
    Instead, consider serializing the relevant data as JSON or a similar text-based
    serialization format.
  metadata:
    cwe: "CWE-502: Deserialization of Untrusted Data"
    owasp: "A8: Insecure Deserialization"
    primary_identifier: "bandit.B301-2"
    secondary_identifiers:
    - name: "Bandit Test ID B301"
      type: "bandit_test_id"
      value: "B301"
  severity: WARNING
  languages: [python]
# avoid-dill
- id: bandit.B301-3
  pattern-either:
  - pattern: dill.$FUNC(...)
  message: |
    Avoid using `dill`, which uses `pickle`, which is known to lead to code execution vulnerabilities.
    When unpickling, the serialized data could be manipulated to run arbitrary code.
    Instead, consider serializing the relevant data as JSON or a similar text-based
    serialization format.
  metadata:
    cwe: "CWE-502: Deserialization of Untrusted Data"
    owasp: "A8: Insecure Deserialization"
    primary_identifier: "bandit.B301-3"
    secondary_identifiers:
    - name: "Bandit Test ID B301"
      type: "bandit_test_id"
      value: "B301"
  languages: [python]
  severity: WARNING
# avoid-shelve
- id: bandit.B301-4
  pattern-either:
  - pattern: shelve.$FUNC(...)
  message: |
    Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities.
    When unpickling, the serialized data could be manipulated to run arbitrary code.
    Instead, consider serializing the relevant data as JSON or a similar text-based
    serialization format.
  metadata:
    cwe: "CWE-502: Deserialization of Untrusted Data"
    owasp: "A8: Insecure Deserialization"
    primary_identifier: "bandit.B301-4"
    secondary_identifiers:
    - name: "Bandit Test ID B301"
      type: "bandit_test_id"
      value: "B301"
  severity: WARNING
  languages: [python]
# source (original): https://github.com/returntocorp/semgrep-rules/blob/develop/python/lang/security/audit/marshal.yaml
# marshal-usage
- id: bandit.B302
  pattern-either:
  - pattern: marshal.dump(...)
  - pattern: marshal.dumps(...)
  - pattern: marshal.load(...)
  - pattern: marshal.loads(...)
  message: |
    The marshal module is not intended to be secure against erroneous or maliciously constructed data.
    Never unmarshal data received from an untrusted or unauthenticated source.
    See more details: https://docs.python.org/3/library/marshal.html?highlight=security
  metadata:
    cwe: "CWE-502: Deserialization of Untrusted Data"
    owasp: "A8: Insecure Deserialization"
    primary_identifier: "bandit.B302"
    secondary_identifiers:
    - name: "Bandit Test ID B302"
      type: "bandit_test_id"
      value: "B302"
  severity: WARNING
  languages: [python]
# source (original): https://github.com/returntocorp/semgrep-rules/blob/develop/python/lang/security/insecure-hash-algorithms.yaml
# insecure-hash-algorithm-md5
- id: bandit.B303-1
  pattern: hashlib.md5(...)
  message: |
    Detected MD5 hash algorithm which is considered insecure. MD5 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  metadata:
    cwe: "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
    owasp: "A3: Sensitive Data Exposure"
    primary_identifier: "bandit.B303-1"
    secondary_identifiers:
    - name: "Bandit Test ID B303"
      type: "bandit_test_id"
      value: "B303"
  severity: WARNING
  languages: [python]
# insecure-hash-algorithm-sha1
- id: bandit.B303-2
  pattern: hashlib.sha1(...)
  message: |
    Detected SHA1 hash algorithm which is considered insecure. SHA1 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  metadata:
    cwe: "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
    owasp: "A3: Sensitive Data Exposure"
    primary_identifier: "bandit.B303-2"
    secondary_identifiers:
    - name: "Bandit Test ID B303"
      type: "bandit_test_id"
      value: "B303"
  severity: WARNING
  languages: [python]
# source (original): https://github.com/returntocorp/semgrep-rules/blob/develop/python/pycryptodome/security/insecure-hash-algorithm.yaml
# insecure-hash-algorithm-md2
- id: bandit.B303-3
  patterns:
  - pattern-either:
    - pattern: Crypto.Hash.MD2.new(...)
    - pattern: Cryptodome.Hash.MD2.new (...)
  message: |
    Detected MD2 hash algorithm which is considered insecure. This algorithm
    has many known vulnerabilities and has been deprecated. Use SHA256 or SHA3 instead.
  metadata:
    cwe: "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
    owasp: "A3: Sensitive Data Exposure"
    primary_identifier: "bandit.B303-3"
    secondary_identifiers:
    - name: "Bandit Test ID B303"
      type: "bandit_test_id"
      value: "B303"
  severity: WARNING
  languages: [python]
# insecure-hash-algorithm-md4
- id: bandit.B303-4
  patterns:
  - pattern-either:
    - pattern: Crypto.Hash.MD4.new(...)
    - pattern: Cryptodome.Hash.MD4.new (...)
  message: |
    Detected MD4 hash algorithm which is considered insecure. This algorithm
    has many known vulnerabilities and has been deprecated. Use SHA256 or SHA3 instead.
  metadata:
    cwe: "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
    owasp: "A3: Sensitive Data Exposure"
    primary_identifier: "bandit.B303-4"
    secondary_identifiers:
    - name: "Bandit Test ID B303"
      type: "bandit_test_id"
      value: "B303"
  severity: WARNING
  languages: [python]
# insecure-hash-algorithm-md5
- id: bandit.B303-5
  patterns:
  - pattern-either:
    - pattern: Crypto.Hash.MD5.new(...)
    - pattern: Cryptodome.Hash.MD5.new (...)
  message: |
    Detected MD5 hash algorithm which is considered insecure. MD5 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  metadata:
    cwe: "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
    owasp: "A3: Sensitive Data Exposure"
    primary_identifier: "bandit.B303-5"
    secondary_identifiers:
    - name: "Bandit Test ID B303"
      type: "bandit_test_id"
      value: "B303"
  severity: WARNING
  languages: [python]
# insecure-hash-algorithm-sha1
- id: bandit.B303-6
  patterns:
  - pattern-either:
    - pattern: Crypto.Hash.SHA.new(...)
    - pattern: Cryptodome.Hash.SHA.new (...)
  message: |
    Detected SHA1 hash algorithm which is considered insecure. SHA1 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  metadata:
    cwe: "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
    owasp: "A3: Sensitive Data Exposure"
    primary_identifier: "bandit.B303-6"
    secondary_identifiers:
    - name: "Bandit Test ID B303"
      type: "bandit_test_id"
      value: "B303"
  severity: WARNING
  languages: [python]
# source (original): https://github.com/returntocorp/semgrep-rules/blob/develop/python/cryptography/security/insecure-hash-algorithms.yaml
# insecure-hash-algorithm-md5
- id: bandit.B303-7
  pattern: cryptography.hazmat.primitives.hashes.MD5(...)
  message: |
    Detected MD5 hash algorithm which is considered insecure. MD5 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  metadata:
    cwe: "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
    owasp: "A3: Sensitive Data Exposure"
    primary_identifier: "bandit.B303-7"
    secondary_identifiers:
    - name: "Bandit Test ID B303"
      type: "bandit_test_id"
      value: "B303"
  severity: WARNING
  languages: [python]
- id: bandit.B303-8
  pattern: cryptography.hazmat.primitives.hashes.SHA1(...)
  message: |
    Detected SHA1 hash algorithm which is considered insecure. SHA1 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  metadata:
    cwe: "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
    owasp: "A3: Sensitive Data Exposure"
    primary_identifier: "bandit.B303-8"
    secondary_identifiers:
    - name: "Bandit Test ID B303"
      type: "bandit_test_id"
      value: "B303"
  severity: WARNING
  languages: [python]
# source (original): https://github.com/returntocorp/semgrep-rules/blob/develop/python/pycryptodome/security/insecure-hash-algorithm.yaml
# insecure-hash-algorithm-md2
- id: bandit.B304-1
  patterns:
  - pattern-either:
    - pattern: Crypto.Hash.MD2.new(...)
    - pattern: Cryptodome.Hash.MD2.new (...)
  message: |
    Detected MD2 hash algorithm which is considered insecure. This algorithm
    has many known vulnerabilities and has been deprecated. Use SHA256 or SHA3 instead.
  metadata:
    cwe: "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
    owasp: "A3: Sensitive Data Exposure"
    primary_identifier: "bandit.B304-1"
    secondary_identifiers:
    - name: "Bandit Test ID B304-1"
      type: "bandit_test_id"
      value: "B304-1"
  severity: WARNING
  languages: [python]
# insecure-hash-algorithm-md4
- id: bandit.B304-2
  patterns:
  - pattern-either:
    - pattern: Crypto.Hash.MD4.new(...)
    - pattern: Cryptodome.Hash.MD4.new (...)
  message: |
    Detected MD4 hash algorithm which is considered insecure. This algorithm
    has many known vulnerabilities and has been deprecated. Use SHA256 or SHA3 instead.
  metadata:
    cwe: "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
    owasp: "A3: Sensitive Data Exposure"
    primary_identifier: "bandit.B304-2"
    secondary_identifiers:
    - name: "Bandit Test ID B304"
      type: "bandit_test_id"
      value: "B304"
  severity: WARNING
  languages: [python]
# insecure-hash-algorithm-md5
- id: bandit.B304-3
  patterns:
  - pattern-either:
    - pattern: Crypto.Hash.MD5.new(...)
    - pattern: Cryptodome.Hash.MD5.new (...)
  message: |
    Detected MD5 hash algorithm which is considered insecure. MD5 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  metadata:
    cwe: "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
    owasp: "A3: Sensitive Data Exposure"
    primary_identifier: "bandit.B304-3"
    secondary_identifiers:
    - name: "Bandit Test ID B304"
      type: "bandit_test_id"
      value: "B304"
  severity: WARNING
  languages: [python]
# insecure-hash-algorithm-sha1
- id: bandit.B304-4
  patterns:
  - pattern-either:
    - pattern: Crypto.Hash.SHA.new(...)
    - pattern: Cryptodome.Hash.SHA.new (...)
  message: |
    Detected SHA1 hash algorithm which is considered insecure. SHA1 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  metadata:
    cwe: "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
    owasp: "A3: Sensitive Data Exposure"
    primary_identifier: "bandit.B304-4"
    secondary_identifiers:
    - name: "Bandit Test ID B304"
      type: "bandit_test_id"
      value: "B304"
  severity: WARNING
  languages: [python]
# source (original): https://github.com/returntocorp/semgrep-rules/blob/develop/python/pycryptodome/security/insecure-cipher-algorithm.yaml
# insecure-cipher-algorithm-rc2
- id: bandit.B304-5
  patterns:
  - pattern-either:
    - pattern: Cryptodome.Cipher.ARC2.new(...)
    - pattern: Crypto.Cipher.ARC2.new
  message: |
    Detected RC2 cipher algorithm which is considered insecure. The algorithm has known vulnerabilities and is difficult to use securely. Use AES instead.
  metadata:
    cwe: "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
    owasp: "A3: Sensitive Data Exposure"
    primary_identifier: "bandit.B304-5"
    secondary_identifiers:
    - name: "Bandit Test ID B304"
      type: "bandit_test_id"
      value: "B304"
  severity: WARNING
  languages: [python]
# insecure-cipher-algorithm-rc4
- id: bandit.B304-6
  patterns:
  - pattern-either:
    - pattern: Cryptodome.Cipher.ARC4.new(...)
    - pattern: Crypto.Cipher.ARC4.new(...)
  message: |
    Detected RC4 cipher algorithm which is considered insecure. The algorithm has many
    known vulnerabilities. Use AES instead.
  metadata:
    cwe: "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
    owasp: "A3: Sensitive Data Exposure"
    primary_identifier: "bandit.B304-6"
    secondary_identifiers:
    - name: "Bandit Test ID B304"
      type: "bandit_test_id"
      value: "B304"
  severity: WARNING
  languages: [python]
# insecure-cipher-algorithm-blowfish
- id: bandit.B304-7
  patterns:
  - pattern-either:
    - pattern: Cryptodome.Cipher.Blowfish.new(...)
    - pattern: Crypto.Cipher.Blowfish.new(...)
  message: |
    Detected Blowfish cipher algorithm which is considered insecure. The algorithm has many
    known vulnerabilities. Use AES instead.
  metadata:
    cwe: "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
    owasp: "A3: Sensitive Data Exposure"
    primary_identifier: "bandit.B304-7"
    secondary_identifiers:
    - name: "Bandit Test ID B304"
      type: "bandit_test_id"
      value: "B304"
  severity: WARNING
  languages: [python]
# insecure-cipher-algorithm-des
- id: bandit.B304-8
  patterns:
  - pattern-either:
    - pattern: Cryptodome.Cipher.DES.new(...)
    - pattern: Crypto.Cipher.DES.new(...)
  message: |
    Detected DES cipher algorithm which is considered insecure. The algorithm is
    considered weak and has been deprecated. Use AES instead.
  metadata:
    cwe: "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
    owasp: "A3: Sensitive Data Exposure"
    primary_identifier: "bandit.B304-8"
    secondary_identifiers:
    - name: "Bandit Test ID B304"
      type: "bandit_test_id"
      value: "B304"
  severity: WARNING
  languages: [python]
# insecure-cipher-algorithm-xor
- id: bandit.B304-9
  patterns:
  - pattern-either:
    - pattern: Cryptodome.Cipher.XOR.new(...)
    - pattern: Crypto.Cipher.XOR.new(...)
  message: |
    Detected XOR cipher algorithm which is considered insecure. This algorithm
    is not cryptographically secure and can be reversed easily. Use AES instead.
  metadata:
    cwe: "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
    owasp: "A3: Sensitive Data Exposure"
    primary_identifier: "bandit.B304-9"
    secondary_identifiers:
    - name: "Bandit Test ID B304"
      type: "bandit_test_id"
      value: "B304"
  severity: WARNING
  languages: [python]
# insecure-cipher-algorithm-rc4
- id: bandit.B304-10
  pattern: cryptography.hazmat.primitives.ciphers.algorithms.ARC4(...)
  message: |
    Detected RC4 cipher algorithm which is considered insecure. The algorithm has many
    known vulnerabilities. Use AES instead.
  metadata:
    cwe: "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
    owasp: "A3: Sensitive Data Exposure"
    primary_identifier: "bandit.B304-10"
    secondary_identifiers:
    - name: "Bandit Test ID B304"
      type: "bandit_test_id"
      value: "B304"
  severity: WARNING
  languages: [python]
# insecure-cipher-algorithm-blowfish
- id: bandit.B304-11
  pattern: cryptography.hazmat.primitives.ciphers.algorithms.Blowfish(...)
  message: |
    Detected Blowfish cipher algorithm which is considered insecure. The algorithm has many
    known vulnerabilities. Use AES instead.
  metadata:
    cwe: "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
    owasp: "A3: Sensitive Data Exposure"
    primary_identifier: "bandit.B304-11"
    secondary_identifiers:
    - name: "Bandit Test ID B304"
      type: "bandit_test_id"
      value: "B304"
  severity: WARNING
  languages: [python]
# insecure-cipher-algorithm-idea
- id: bandit.B304-12
  pattern: cryptography.hazmat.primitives.ciphers.algorithms.IDEA(...)
  message: |
    Detected IDEA cipher algorithm which is considered insecure. The algorithm is
    considered weak and has been deprecated. Use AES instead.
  metadata:
    cwe: "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
    owasp: "A3: Sensitive Data Exposure"
    primary_identifier: "bandit.B304-12"
    secondary_identifiers:
    - name: "Bandit Test ID B304"
      type: "bandit_test_id"
      value: "B304"
  severity: WARNING
  languages: [python]
# source (original): https://github.com/returntocorp/semgrep-rules/blob/develop/python/cryptography/security/insecure-cipher-mode-ecb.yaml
# insecure-cipher-mode-ecb
- id: bandit.B305
  pattern: cryptography.hazmat.primitives.ciphers.modes.ECB(...)
  message: |
    Detected ECB cipher mode which is considered insecure. The algorithm can
    potentially leak information about the plaintext. Use CBC mode instead.
  metadata:
    cwe: "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
    owasp: "A3: Sensitive Data Exposure"
    primary_identifier: "bandit.B305"
    secondary_identifiers:
    - name: "Bandit Test ID B305"
      type: "bandit_test_id"
      value: "B305"
  severity: WARNING
  languages: [python]
# source (original): https://github.com/returntocorp/semgrep-rules/blob/develop/python/lang/correctness/tempfile/mktemp.yaml
# tempfile-insecure
- id: bandit.B306
  pattern: tempfile.mktemp(...)
  message: |
    Use tempfile.NamedTemporaryFile instead. From the official Python documentation: THIS FUNCTION IS UNSAFE AND SHOULD
    NOT BE USED. The file name may refer to a file that did not exist at some point, but by the time you get around to creating
    it, someone else may have beaten you to the punch.
  metadata:
    cwe: "CWE-377: Insecure Temporary File"
    owasp: "A3: Sensitive Data Exposure"
    primary_identifier: "bandit.B306"
    secondary_identifiers:
    - name: "Bandit Test ID B306"
      type: "bandit_test_id"
      value: "B306"
  languages: [python]
  severity: ERROR
# source (modified): https://semgrep.dev/c/p/bandit
# python.lang.security.audit.eval-detected.eval-detected
- id: bandit.B307
  patterns:
  - pattern: eval(...)
  message: |
    Detected the use of eval(). eval() can be dangerous if used to evaluate
    dynamic content. If this content can be input from outside the program, this
    may be a code injection vulnerability. Ensure evaluated content is not definable
    by external sources. Consider using safer ast.literal_eval.
  metadata:
    cwe: "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      ('Eval Injection')"
    owasp: "A1: Injection"
    primary_identifier: "bandit.B307"
    secondary_identifiers:
    - name: "Bandit Test ID B307"
      type: "bandit_test_id"
      value: "B307"
  severity: WARNING
  languages: [python]
# source (modified): https://github.com/returntocorp/semgrep-rules/blob/develop/python/django/security/audit/avoid-mark-safe.yaml
# avoid-mark-safe
- id: bandit.B703
  patterns:
  - pattern-not-inside: |-
      django.utils.html.format_html(...)
  - pattern-either:
    - patterns:
        - pattern: django.utils.safestring.mark_safe(...)
        - pattern-not: django.utils.safestring.mark_safe("...")
  message: |
    'mark_safe()' is used to mark a string as "safe" for HTML output.
    This disables escaping and could therefore subject the content to
    XSS attacks. Use 'django.utils.html.format_html()' to build HTML
    for rendering instead.
  metadata:
    cwe: "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site
      Scripting')"
    owasp: "A7: Cross-Site Scripting (XSS)"
    primary_identifier: "bandit.B703"
    secondary_identifiers:
    - name: "Bandit Test ID B703"
      type: "bandit_test_id"
      value: "B703"
  severity: WARNING
  languages: [python]
# source (original): https://github.com/returntocorp/semgrep-rules/blob/develop/python/lang/security/audit/httpsconnection-detected.yaml
# httpsconnection-detected
- id: bandit.B309
  patterns:
  - pattern-either:
    - pattern: httplib.HTTPSConnection(...)
    - pattern: http.client.HTTPSConnection(...)
    - pattern: six.moves.http_client.HTTPSConnection(...)
  message: |
    The HTTPSConnection API has changed frequently with minor releases of Python.
    Ensure you are using the API for your version of Python securely.
    For example, Python 3 versions prior to 3.4.3 will not verify SSL certificates by default.
    See https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection
    for more information.
  metadata:
    cwe: "CWE-295: Improper Certificate Validation"
    owasp: "A3: Sensitive Data Exposure"
    primary_identifier: "bandit.B309"
    secondary_identifiers:
    - name: "Bandit Test ID B309"
      type: "bandit_test_id"
      value: "B309"
  severity: WARNING
  languages: [python]
# source (original): https://github.com/returntocorp/semgrep-rules/blob/develop/python/lang/security/audit/dynamic-urllib-use-detected.yaml
# dynamic-urllib-use-detected
- id: bandit.B310-1
  patterns:
  - pattern-not: urllib.$W("...")
  - pattern-not: urllib.request.$W("...")
  - pattern-not: $OPENER.$W("...")
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: urllib.urlopen(...)
        - pattern: urllib.request.urlopen(...)
        - pattern: urllib.urlretrieve(...)
        - pattern: urllib.request.urlretrieve(...)
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $OPENER = urllib.URLopener(...)
            ...
        - pattern-inside: |
            $OPENER = urllib.request.URLopener(...)
            ...
        - pattern-inside: |
            $OPENER = urllib.FancyURLopener(...)
            ...
        - pattern-inside: |
            $OPENER = urllib.request.FancyURLopener(...)
            ...
      - pattern-either:
        - pattern: $OPENER.open(...)
        - pattern: $OPENER.retrieve(...)
  message: >-
    Detected a dynamic value being used with urllib. urllib supports 'file://' schemes,
    so a dynamic value controlled by a malicious actor may allow them to read arbitrary files.
    Audit uses of urllib calls to ensure user data cannot control the URLs, or consider
    using the 'requests' library instead.
  metadata:
    cwe: "CWE-939: Improper Authorization in Handler for Custom URL Scheme"
    owasp: "A5: Broken Access Control"
    primary_identifier: "bandit.B310-1"
    secondary_identifiers:
    - name: "Bandit Test ID B310-1"
      type: "bandit_test_id"
      value: "B310-1"
  severity: WARNING
  languages: [python]
- id: bandit.B310-2
  pattern-either:
    - pattern: urllib2.urlopen(...)
    - pattern: urllib2.Request(...)
    - pattern: urllib.URLopener(...)
    - pattern: urllib.FancyURLopener(...)
    - pattern: urllib.request.FancyURLopener(...)
    - pattern: urllib.request.urlopen(...)
    - pattern: urllib.request.URLopener(...)
    - pattern: six.moves.urllib.request.urlopen(...)
    - pattern: six.moves.urllib.request.urlretrieve(...)
    - pattern: six.moves.urllib.request.URLopener(...)
    - pattern: six.moves.urllib.request.FancyURLopener(...)
  message: >-
    Detected a dynamic value being used with urllib. urllib supports 'file://' schemes,
    so a dynamic value controlled by a malicious actor may allow them to read arbitrary files.
    Audit uses of urllib calls to ensure user data cannot control the URLs, or consider
    using the 'requests' library instead.
  metadata:
    cwe: "CWE-939: Improper Authorization in Handler for Custom URL Scheme"
    owasp: "A5: Broken Access Control"
    primary_identifier: "bandit.B310-2"
    secondary_identifiers:
    - name: "Bandit Test ID B310"
      type: "bandit_test_id"
      value: "B310"
  severity: WARNING
  languages: [python]
- id: "bandit.B612"
  patterns:
  - pattern: "logging.config.listen(...)"
  message: |
    The logging.config.listen function provides the ability to listen for external configuration
    files on a socket server. Because portions of the configuration are passed through eval(), use
    of this function may open its users to a security risk. While the function only binds to a
    socket on localhost, and so does not accept connections from remote machines, there are
    scenarios where untrusted code could be run under the account of the process which calls
    listen(). logging.config.listen provides the ability to verify bytes received across the socket
    with signature verification or encryption/decryption.
  metadata:
    cwe: "CWE-94: Improper Control of Generation of Code ('Code Injection')"
    primary_identifier: "bandit.B612"
    secondary_identifiers:
    - name: "Bandit Test ID B612"
      type: "bandit_test_id"
      value: "B612"
  severity: "WARNING"
  languages:
  - "python"
- id: bandit.B311
  pattern-either:
    - pattern: random.random(...)
    - pattern: random.randrange(...)
    - pattern: random.randint(...)
    - pattern: random.choice(...)
    - pattern: random.uniform(...)
    - pattern: random.triangular(...)
  message: |
    Standard pseudo-random generators are not suitable for security/cryptographic purposes.
  metadata:
    cwe: "CWE-330: Use of Insufficiently Random Values"
    owasp: "A3: Sensitive Data Exposure"
    primary_identifier: "bandit.B311"
    secondary_identifiers:
    - name: "Bandit Test ID B311"
      type: "bandit_test_id"
      value: "B311"
  severity: INFO
  languages: [python]
# source (original): https://github.com/returntocorp/semgrep-rules/blob/develop/python/lang/security/audit/telnetlib.yaml
# telnetlib
- id: bandit.B312
  pattern: telnetlib.$ANYTHING(...)
  message: |
    Telnet does not encrypt communications. Use SSH instead.
  metadata:
    cwe: "CWE-319: Cleartext Transmission of Sensitive Information"
    owasp: "A3: Sensitive Data Exposure"
    primary_identifier: "bandit.B312"
    secondary_identifiers:
    - name: "Bandit Test ID B312"
      type: "bandit_test_id"
      value: "B312"
  severity: WARNING
  languages: [python]
# source (modified): https://github.com/returntocorp/semgrep-rules/blob/develop/python/lang/security/use-defused-xml.yaml
- id: bandit.B313
  pattern-either:
  - patterns:
    - pattern: xml.etree.cElementTree.fromstring(...)
    - pattern-not: xml.etree.cElementTree.fromstring("...")
  - pattern: xml.etree.cElementTree.parse(...)
  - pattern: xml.etree.cElementTree.iterparse(...)
  - pattern: xml.etree.cElementTree.XMLParser(...)
  metadata:
    cwe: "CWE-611: Improper Restriction of XML External Entity Reference"
    owasp: "A4: XML External Entities (XXE)"
    primary_identifier: "bandit.B313"
    secondary_identifiers:
    - name: "Bandit Test ID B313"
      type: "bandit_test_id"
      value: "B313"
  message: |
    Found use of the native Python XML libraries, which is vulnerable to XML external entity (XXE)
    attacks. The Python documentation recommends the `defusedxml` library instead. Use
    'defusedxml'. See https://github.com/tiran/defusedxml for more information.
  severity: WARNING
  languages: [python]
- id: bandit.B314
  pattern-either:
  - patterns:
    - pattern: xml.etree.ElementTree.fromstring(...)
    - pattern-not: xml.etree.ElementTree.fromstring("...")
  - pattern: xml.etree.ElementTree.parse(...)
  - pattern: xml.etree.ElementTree.iterparse(...)
  - pattern: xml.etree.ElementTree.XMLParser(...)
  metadata:
    cwe: "CWE-611: Improper Restriction of XML External Entity Reference"
    owasp: "A4: XML External Entities (XXE)"
    primary_identifier: "bandit.B314"
    secondary_identifiers:
    - name: "Bandit Test ID B314"
      type: "bandit_test_id"
      value: "B314"
  message: |
    Found use of the native Python XML libraries, which is vulnerable to XML external entity (XXE)
    attacks. The Python documentation recommends the `defusedxml` library instead. Use
    'defusedxml'. See https://github.com/tiran/defusedxml for more information.
  severity: WARNING
  languages: [python]
- id: bandit.B320
  pattern-either:
  - pattern: lxml.etree.parse(...)
  - patterns:
    - pattern: lxml.etree.fromstring(...)
    - pattern-not: lxml.etree.fromstring("...")
  - pattern: lxml.etree.RestrictedElement(...)
  - pattern: lxml.etree.GlobalParserTLS(...)
  - pattern: lxml.etree.getDefaultParser(...)
  - pattern: lxml.etree.check_docinfo(...)
  metadata:
    cwe: "CWE-611: Improper Restriction of XML External Entity Reference"
    owasp: "A4: XML External Entities (XXE)"
    primary_identifier: "bandit.B320"
    secondary_identifiers:
    - name: "Bandit Test ID B320"
      type: "bandit_test_id"
      value: "B320"
  message: |
    Found use of the native Python XML libraries, which is vulnerable to XML external entity (XXE)
    attacks. The Python documentation recommends the `defusedxml` library instead. Use
    'defusedxml'. See https://github.com/tiran/defusedxml for more information.
  severity: WARNING
  languages: [python]
- id: bandit.B316
  pattern-either:
  - patterns:
    - pattern: xml.dom.expatbuilder.parse(...)
    - pattern-not: xml.dom.expatbuilder.parse("...")
  - pattern: xml.dom.expatbuilder.parseString(...)
  message: |
    Insecure XML parsing functionality, prefer `defusedxml`
  metadata:
    cwe: "CWE-611: Improper Restriction of XML External Entity Reference"
    owasp: "A4: XML External Entities (XXE)"
    primary_identifier: "bandit.B316"
    secondary_identifiers:
    - name: "Bandit Test ID B316"
      type: "bandit_test_id"
      value: "B316"
  severity: WARNING
  languages: [python]
- id: bandit.B315
  pattern-either:
  - pattern: xml.dom.expatreader.parse(...)
  - patterns:
    - pattern: xml.dom.expatreader.parseString(...)
    - pattern-not: xml.dom.expatreader.parseString("...")
  - pattern: xml.dom.expatreader.parseString(...)
  - pattern: xml.dom.expatreader.create_parser(...)
  message: |
    Insecure XML parsing functionality, prefer `defusedxml`
  metadata:
    cwe: "CWE-611: Improper Restriction of XML External Entity Reference"
    owasp: "A4: XML External Entities (XXE)"
    primary_identifier: "bandit.B315"
    secondary_identifiers:
    - name: "Bandit Test ID B315"
      type: "bandit_test_id"
      value: "B315"
  severity: WARNING
  languages: [python]
- id: bandit.B405
  patterns:
  - pattern-either:
    - pattern: import xml.etree.cElementTree
    - pattern: import xml.etree.ElementTree
  message: |
    Consider possible security implications associated with etree module.
  metadata:
    cwe: "CWE-502: Deserialization of Untrusted Data"
    owasp: "A8: Insecure Deserialization"
    primary_identifier: "bandit.B405"
    secondary_identifiers:
    - name: "Bandit Test ID B405"
      type: "bandit_test_id"
      value: "B405"
  severity: INFO
  languages: [python]
- id: bandit.B406
  patterns:
  - pattern-either:
    - pattern: import xml.sax
  message: |
    Using various methods to parse untrusted XML data is known to be vulnerable to
    XML attacks. Replace vulnerable imports with the equivalent defusedxml package,
    or make sure defusedxml.defuse_stdlib() is called.
  metadata:
    cwe: "CWE-502: Deserialization of Untrusted Data"
    owasp: "A8: Insecure Deserialization"
    primary_identifier: "bandit.B406"
    secondary_identifiers:
    - name: "Bandit Test ID B406"
      type: "bandit_test_id"
      value: "B406"
  severity: INFO
  languages: [python]
- id: bandit.B407
  patterns:
  - pattern-either:
    - pattern: import xml.dom.expatbuilder
  message: |
    Using various methods to parse untrusted XML data is known to be vulnerable to
    XML attacks. Replace vulnerable imports with the equivalent defusedxml package,
    or make sure defusedxml.defuse_stdlib() is called.
  metadata:
    cwe: "CWE-502: Deserialization of Untrusted Data"
    owasp: "A8: Insecure Deserialization"
    primary_identifier: "bandit.B407"
    secondary_identifiers:
    - name: "Bandit Test ID B407"
      type: "bandit_test_id"
      value: "B407"
  severity: INFO
  languages: [python]
- id: bandit.B409
  patterns:
  - pattern-either:
    - pattern: import xml.dom.pulldom
  message: |
    Using various methods to parse untrusted XML data is known to be vulnerable to
    XML attacks. Replace vulnerable imports with the equivalent defusedxml package,
    or make sure defusedxml.defuse_stdlib() is called.
  metadata:
    cwe: "CWE-502: Deserialization of Untrusted Data"
    owasp: "A8: Insecure Deserialization"
    primary_identifier: "bandit.B409"
    secondary_identifiers:
    - name: "Bandit Test ID B409"
      type: "bandit_test_id"
      value: "B409"
  severity: INFO
  languages: [python]
- id: bandit.B410
  patterns:
  - pattern-either:
    - pattern: import lxml
  message: |
    Using various methods to parse untrusted XML data is known to be vulnerable to
    XML attacks. Replace vulnerable imports with the equivalent defusedxml package.
  metadata:
    cwe: "CWE-502: Deserialization of Untrusted Data"
    owasp: "A8: Insecure Deserialization"
    primary_identifier: "bandit.B410"
    secondary_identifiers:
    - name: "Bandit Test ID B410"
      type: "bandit_test_id"
      value: "B410"
  severity: INFO
  languages: [python]
- id: bandit.B408
  patterns:
  - pattern-either:
    - pattern: import xml.dom.minidom
  message: |
    Using various methods to parse untrusted XML data is known to be vulnerable
    to XML attacks. Replace vulnerable imports with the equivalent defusedxml
    package, or make sure defusedxml.defuse_stdlib() is called.
  metadata:
    cwe: "CWE-502: Deserialization of Untrusted Data"
    owasp: "A8: Insecure Deserialization"
    primary_identifier: "bandit.B408"
    secondary_identifiers:
    - name: "Bandit Test ID B408"
      type: "bandit_test_id"
      value: "B408"
  severity: INFO
  languages: [python]
# source (original): https://semgrep.dev/c/p/bandit
# contrib.dlint.dlint-equivalent.insecure-xml-use
- id: bandit.B317
  pattern-either:
    - pattern: xml.sax.parse(...)
    - patterns:
      - pattern: xml.sax.parseString(...)
      - pattern-not: xml.sax.parseString("...")
    - pattern: xml.sax.make_parser(...)
  message: |
    Insecure XML parsing functionality, prefer `defusedxml`
  metadata:
    cwe: "CWE-611: Improper Restriction of XML External Entity Reference"
    owasp: "A4: XML External Entities (XXE)"
    primary_identifier: "bandit.B317"
    secondary_identifiers:
    - name: "Bandit Test ID B317"
      type: "bandit_test_id"
      value: "B317"
  severity: WARNING
  languages: [python]
- id: bandit.B318
  pattern-either:
    - patterns:
      - pattern: xml.dom.minidom.parseString(...)
      - pattern-not: xml.dom.minidom.parseString("...")
    - pattern: xml.dom.minidom.parse(...)
  message: |
    Found use of the native Python XML libraries, which is vulnerable to XML external entity (XXE)
    attacks. The Python documentation recommends the `defusedxml` library instead. Use
    'defusedxml'. See https://github.com/tiran/defusedxml for more information.
  metadata:
    cwe: "CWE-611: Improper Restriction of XML External Entity Reference"
    owasp: "A4: XML External Entities (XXE)"
    primary_identifier: "bandit.B318"
    secondary_identifiers:
    - name: "Bandit Test ID B318"
      type: "bandit_test_id"
      value: "B318"
  severity: WARNING
  languages: [python]
- id: bandit.B319
  pattern-either:
    - patterns:
      - pattern: xml.dom.pulldom.parseString(...)
      - pattern-not: xml.dom.pulldom.parseString("...")
    - pattern: xml.dom.pulldom.parse(...)
  metadata:
    cwe: "CWE-611: Improper Restriction of XML External Entity Reference"
    owasp: "A4: XML External Entities (XXE)"
    primary_identifier: "bandit.B319"
    secondary_identifiers:
    - name: "Bandit Test ID B319"
      type: "bandit_test_id"
      value: "B319"
  message: |
    Found use of the native Python XML libraries, which is vulnerable to XML external entity (XXE)
    attacks. The Python documentation recommends the `defusedxml` library instead. Use
    'defusedxml'. See https://github.com/tiran/defusedxml for more information.
  severity: WARNING
  languages: [python]
# source (original): https://github.com/returntocorp/semgrep-rules/blob/develop/python/lang/security/audit/ftplib.yaml
# ftplib
- id: bandit.B321
  pattern: ftplib.$ANYTHING(...)
  message: |
    FTP does not encrypt communications by default. This can lead to sensitive
    data being exposed. Ensure use of FTP here does not expose sensitive data.
  metadata:
    cwe: "CWE-319: Cleartext Transmission of Sensitive Information"
    owasp: "A3: Sensitive Data Exposure"
    primary_identifier: "bandit.B321"
    secondary_identifiers:
    - name: "Bandit Test ID B321"
      type: "bandit_test_id"
      value: "B321"
  severity: WARNING
  languages: [python]
# source (original): https://github.com/returntocorp/semgrep-rules/blob/develop/python/lang/security/unverified-ssl-context.yaml
# unverified-ssl-context
- id: bandit.B323
  pattern: ssl._create_unverified_context(...)
  message: |
    Unverified SSL context detected. This will permit insecure connections without verifying
    SSL certificates. Use 'ssl.create_default_context()' instead.
  metadata:
    cwe: "CWE-295: Improper Certificate Validation"
    owasp: "A3: Sensitive Data Exposure"
    primary_identifier: "bandit.B323"
    secondary_identifiers:
    - name: "Bandit Test ID B323"
      type: "bandit_test_id"
      value: "B323"
  severity: ERROR
  languages: [python]
# source (modified): https://github.com/returntocorp/semgrep-rules/blob/develop/python/lang/security/insecure-hash-function.yaml
# insecure-hash-function
- id: bandit.B324
  patterns:
  - pattern-either:
    - pattern: hashlib.new("=~/[M|m][D|d][4|5]/", ...)
    - pattern: hashlib.new(..., name="=~/[M|m][D|d][4|5]/", ...)
    - pattern: hashlib.new('sha1')
    - pattern: hashlib.new(..., name='SHA1')
    - pattern: hashlib.new('sha', string='test')
    - pattern: hashlib.new(name='SHA', string='test')
  message: |
    Detected use of an insecure MD4 or MD5 hash function.
    These functions have known vulnerabilities and are considered deprecated.
    Consider using 'SHA256' or a similar function instead.
  metadata:
    cwe: "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
    owasp: "A3: Sensitive Data Exposure"
    primary_identifier: "bandit.B324"
    secondary_identifiers:
    - name: "Bandit Test ID B324"
      type: "bandit_test_id"
      value: "B324"
  severity: WARNING
  languages: [python]
# source (modified): https://semgrep.dev/c/p/bandit
# contrib.dlint.dlint-equivalent.insecure-os-temp-use
- id: bandit.B325
  pattern-either:
  - pattern: os.tempnam(...)
  - pattern: os.tmpnam(...)
  message: The Python 'os' tempnam|tmpnam functions are vulnerable to symlink attacks
  metadata:
    cwe: "CWE-377: Insecure Temporary File"
    primary_identifier: "bandit.B325"
    secondary_identifiers:
    - name: "Bandit Test ID B325"
      type: "bandit_test_id"
      value: "B325"
  severity: WARNING
  languages: [python]
- id: bandit.B401
  patterns:
    - pattern: import telnetlib
  message: |
    Telnet-related functions are being called. Telnet is considered insecure. Use SSH or some other encrypted protocol.
  metadata:
    cwe: "CWE-319: Cleartext Transmission of Sensitive Information"
    owasp: "A3: Sensitive Data Exposure"
    primary_identifier: "bandit.B401"
    secondary_identifiers:
    - name: "Bandit Test ID B401"
      type: "bandit_test_id"
      value: "B401"
  severity: ERROR
  languages: [python]
- id: bandit.B402
  patterns:
    - pattern-either:
      - pattern: import ftplib
      - pattern: from ftplib import FTP
      - pattern: ftplib.FTP(...)
  message: |
    functions are being called. FTP is considered insecure. Use SSH/SFTP/SCP or some other encrypted protocol
  metadata:
    cwe: "CWE-319: Cleartext Transmission of Sensitive Information"
    owasp: "A3: Sensitive Data Exposure"
    primary_identifier: "bandit.B402"
    secondary_identifiers:
    - name: "Bandit Test ID B402"
      type: "bandit_test_id"
      value: "B402"
  severity: ERROR
  languages: [python]
- id: bandit.B403
  patterns:
    - pattern-either:
      - pattern: import pickle
      - pattern: import cPickle
      - pattern: import dill
  message: |
    Consider possible security implications associated with pickle module.
  metadata:
    cwe: "CWE-502: Deserialization of Untrusted Data"
    owasp: "A8: Insecure Deserialization"
    primary_identifier: "bandit.B403"
    secondary_identifiers:
    - name: "Bandit Test ID B403"
      type: "bandit_test_id"
      value: "B403"
  severity: INFO
  languages: [python]
# source (original): https://github.com/returntocorp/semgrep-rules/blob/develop/python/lang/correctness/unchecked-returns.yaml
# unchecked-subprocess-call
- id: bandit.B404
  patterns:
  - pattern: import subprocess
  message: |
    Consider possible security implications associated with subprocess module.
  metadata:
    cwe: "CWE-78: Improper Neutralization of Special Elements used in an OS Command
      ('OS Command Injection')"
    owasp: "A8: Insecure Deserialization"
    primary_identifier: "bandit.B404"
    secondary_identifiers:
    - name: "Bandit Test ID B404"
      type: "bandit_test_id"
      value: "B404"
  languages: [python]
  severity: WARNING
- id: bandit.B411
  pattern-either:
    - pattern: import xmlrpclib
  message: |
    Consider possible security implications associated with xmlrpclib module.
  metadata:
    cwe: "CWE-502: Deserialization of Untrusted Data"
    owasp: "A8: Insecure Deserialization"
    primary_identifier: "bandit.B411"
    secondary_identifiers:
    - name: "Bandit Test ID B411"
      type: "bandit_test_id"
      value: "B411"
  severity: ERROR
  languages: [python]
- id: bandit.B412
  pattern-either:
    - pattern: wsgiref.handlers.CGIHandler(...)
    - pattern: twisted.web.twcgi.CGIDirectory(...)
  message: |
    Consider possible security implications associated with httpoxy module.
  metadata:
    cwe: "CWE-284: Improper Access Control"
    owasp: "A5: Broken Access Control"
    primary_identifier: "bandit.B412"
    secondary_identifiers:
    - name: "Bandit Test ID B412"
      type: "bandit_test_id"
      value: "B412"
  severity: ERROR
  languages: [python]
- id: bandit.B413
  pattern-either:
    - pattern: import pycryto
    - pattern: import Crypto.Cipher
    - pattern: import Crypto.Hash
    - pattern: import Crypto.IO
    - pattern: import Crypto.Protocol
    - pattern: import Crypto.PublicKey
    - pattern: import Crypto.Random
    - pattern: import Crypto.Signature
    - pattern: import Crypto.Util
  message: |
    Consider possible security implications associated with pycrypto module.
  metadata:
    cwe: "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
    owasp: "A3: Sensitive Data Exposure"
    primary_identifier: "bandit.B413"
    secondary_identifiers:
    - name: "Bandit Test ID B413"
      type: "bandit_test_id"
      value: "B413"
  severity: ERROR
  languages: [python]
# source (original): https://github.com/returntocorp/semgrep-rules/blob/develop/python/requests/security/disabled-cert-validation.yaml
# disabled-cert-validation
- id: bandit.B501
  patterns:
  - pattern-either:
    - pattern: requests.put(..., verify=False, ...)
    - pattern: requests.patch(..., verify=False, ...)
    - pattern: requests.delete(..., verify=False, ...)
    - pattern: requests.head(..., verify=False, ...)
    - pattern: requests.options(..., verify=False, ...)
    - pattern: requests.request(..., verify=False, ...)
    - pattern: requests.get(..., verify=False, ...)
    - pattern: requests.post(..., verify=False, ...)
  message: |
    Certificate verification has been explicitly disabled. This
    permits insecure connections to insecure servers. Re-enable
    certification validation.
  metadata:
    cwe: "CWE-295: Improper Certificate Validation"
    owasp: "A3: Sensitive Data Exposure"
    primary_identifier: "bandit.B501"
    secondary_identifiers:
    - name: "Bandit Test ID B501"
      type: "bandit_test_id"
      value: "B501"
  severity: ERROR
  languages: [python]
# source (original): https://github.com/returntocorp/semgrep-rules/blob/develop/python/lang/security/audit/weak-ssl-version.yaml
# weak-ssl-version
- id: bandit.B502
  patterns:
  - pattern-either:
    - pattern: ssl.PROTOCOL_SSLv2
    - pattern: ssl.PROTOCOL_SSLv3
    - pattern: ssl.PROTOCOL_TLSv1
    - pattern: ssl.PROTOCOL_TLSv1_1
    - pattern: pyOpenSSL.SSL.SSLv2_METHOD
    - pattern: pyOpenSSL.SSL.SSLv23_METHOD
    - pattern: pyOpenSSL.SSL.SSLv3_METHOD
    - pattern: pyOpenSSL.SSL.TLSv1_METHOD
    - pattern: pyOpenSSL.SSL.TLSv1_1_METHOD
  message: |
    An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions
    are considered weak encryption and are deprecated.
    Use 'ssl.PROTOCOL_TLSv1_2' or higher.
  metadata:
    cwe: "CWE-326: Inadequate Encryption Strength"
    owasp: "A3: Sensitive Data Exposure"
    primary_identifier: "bandit.B502"
    secondary_identifiers:
    - name: "Bandit Test ID B502"
      type: "bandit_test_id"
      value: "B502"
  severity: WARNING
  languages: [python]
- id: bandit.B504
  patterns:
    - pattern: ssl.wrap_socket()
  message: |
    ssl.wrap_socket call with no SSL/TLS protocol version specified, the default SSLv23 could be insecure, possible security issue.
  metadata:
    cwe: "CWE-326: Inadequate Encryption Strength"
    owasp: "A3: Sensitive Data Exposure"
    primary_identifier: "bandit.B504"
    secondary_identifiers:
    - name: "Bandit Test ID B504"
      type: "bandit_test_id"
      value: "B504"
  severity: INFO
  languages: [python]
# source (modified/combined): https://github.com/returntocorp/semgrep-rules/tree/develop/python/cryptography/security/insufficient*-size/insufficient*-size.yaml
- id: bandit.B505-1
  patterns:
  - pattern-either:
    - pattern: cryptography.hazmat.primitives.asymmetric.rsa.generate_private_key(..., key_size=$SIZE, ...)
    - pattern: cryptography.hazmat.primitives.asymmetric.rsa.generate_private_key($EXP, $SIZE, ...)
    - pattern: cryptography.hazmat.primitives.asymmetric.rsa.generate_private_key($SIZE, ...)
    - pattern: cryptography.hazmat.primitives.asymmetric.dsa.generate_private_key(..., key_size=$SIZE, ...)
    - pattern: cryptography.hazmat.primitives.asymmetric.dsa.generate_private_key($EXP, $SIZE, ...)
    - pattern: cryptography.hazmat.primitives.asymmetric.dsa.generate_private_key($SIZE, ...)
    - pattern: Crypto.PublicKey.RSA.generate($SIZE, ...)
    - pattern: Crypto.PublicKey.DSA.generate($SIZE, ...)
    - pattern: Cryptodome.PublicKey.DSA.generate($SIZE, ...)
    - pattern: Cryptodome.PublicKey.RSA.generate($SIZE, ...)
    - pattern: Crypto.PublicKey.DSA.generate(bits=$SIZE, ...)
    - pattern: Cryptodome.PublicKey.DSA.generate(bits=$SIZE, ...)
    - pattern: pycrypto_rsa.generate(bits=$SIZE, ...)
    - pattern: pycrypto_dsa.generate(bits=$SIZE, ...)
    - pattern: pycryptodomex_rsa.generate(bits=$SIZE, ...)
    - pattern: pycryptodomex_rsa.generate($SIZE, ...)
    - pattern: pycryptodomex_dsa.generate(bits=$SIZE, ...)
    - pattern: pycryptodomex_dsa.generate($SIZE, ...)
  - metavariable-comparison:
      metavariable: $SIZE
      comparison: $SIZE < 2048
  message: |
    Detected an insufficient key size for DSA. NIST recommends
    a key size of 2048 or higher.
  metadata:
    cwe: "CWE-326: Inadequate Encryption Strength"
    owasp: "A3: Sensitive Data Exposure"
    primary_identifier: "bandit.B505-1"
    secondary_identifiers:
    - name: "Bandit Test ID B505-1"
      type: "bandit_test_id"
      value: "B505-1"
  severity: WARNING
  languages: [python]
- id: bandit.B505-2
  patterns:
  - pattern-inside: cryptography.hazmat.primitives.asymmetric.ec.generate_private_key(...)
  message: |
    Detected an insufficient curve size for EC. NIST recommends
    a key size of 224 or higher. For example, use 'ec.SECP256R1'.
  metadata:
    cwe: "CWE-326: Inadequate Encryption Strength"
    owasp: "A3: Sensitive Data Exposure"
    primary_identifier: "bandit.B505-2"
    secondary_identifiers:
    - name: "Bandit Test ID B505"
      type: "bandit_test_id"
      value: "B505"
  severity: WARNING
  languages: [python]
# source (original): https://github.com/returntocorp/semgrep-rules/blob/develop/python/lang/security/deserialization/avoid-pyyaml-load.yaml
# avoid-pyyaml-load
- id: bandit.B506
  patterns:
  - pattern-inside: |
      import yaml
      ...
      yaml.load($FOO)
  - pattern: yaml.load($FOO)
  message: |
    Avoid using `load()`. `PyYAML.load` can create arbitrary Python
    objects. A malicious actor could exploit this to run arbitrary
    code. Use `safe_load()` instead.
  metadata:
    cwe: "CWE-502: Deserialization of Untrusted Data"
    owasp: "A8: Insecure Deserialization"
    primary_identifier: "bandit.B506"
    secondary_identifiers:
    - name: "Bandit Test ID B506"
      type: "bandit_test_id"
      value: "B506"
  severity: ERROR
  languages: [python]
# source (original): https://github.com/returntocorp/semgrep-rules/blob/develop/python/lang/security/audit/paramiko-implicit-trust-host-key.yaml
# paramiko-implicit-trust-host-key
- id: bandit.B507
  patterns:
  - pattern-inside: |
      $CLIENT = paramiko.client.SSHClient(...)
      ...
      $CLIENT.set_missing_host_key_policy(...)
  - pattern-either:
    - pattern: paramiko.client.AutoAddPolicy
    - pattern: paramiko.client.WarningPolicy
  message: |
    Detected a paramiko host key policy that implicitly trusts a server's
    host key. Host keys should be verified to ensure the connection
    is not to a malicious server. Use RejectPolicy or a custom subclass
    instead.
  metadata:
    cwe: "CWE-322: Key Exchange without Entity Authentication"
    owasp: "A5: Broken Access Control"
    primary_identifier: "bandit.B507"
    secondary_identifiers:
    - name: "Bandit Test ID B507"
      type: "bandit_test_id"
      value: "B507"
  severity: WARNING
  languages: [python]
# source (original): https://github.com/returntocorp/semgrep-rules/blob/develop/python/lang/security/audit/paramiko/paramiko-exec-command.yaml
# paramiko-exec-command
- id: bandit.B601
  patterns:
  - pattern-inside: |
      import paramiko
      ...
  - pattern: $CLIENT.exec_command(...)
  message: |
    Unverified SSL context detected. This will permit insecure connections without verifying
    SSL certificates. Use 'ssl.create_default_context()' instead.
  metadata:
    cwe: "CWE-78: Improper Neutralization of Special Elements used in an OS Command
      ('OS Command Injection')"
    owasp: "A1: Injection"
    primary_identifier: "bandit.B601"
    secondary_identifiers:
    - name: "Bandit Test ID B601"
      type: "bandit_test_id"
      value: "B601"
  severity: WARNING
  languages: [python]
# source (original): https://github.com/returntocorp/semgrep-rules/blob/develop/python/lang/security/audit/subprocess-shell-true.yaml
# subprocess-shell-true
- id: bandit.B602
  patterns:
  - pattern-not: subprocess.$FUNC(..., shell=False, ...)
  - pattern-not: subprocess.$FUNC(..., shell=False)
  - pattern-not: subprocess.$FUNC(..., shell=0)
  - pattern-not: subprocess.$FUNC(..., shell=[])
  - pattern-not: subprocess.$FUNC(..., shell={})
  - pattern-not: subprocess.$FUNC(..., shell=None)
  - pattern-either:
    - pattern: subprocess.$FUNC(..., shell=True, ...)
    - pattern: subprocess.$FUNC(..., shell='True', ...)
    - pattern: subprocess.$FUNC(..., shell='False', ...)
    - pattern: subprocess.$FUNC(..., shell='None', ...)
    - pattern: subprocess.$FUNC(..., shell=$X, ...)
  message: |
    Found 'subprocess' function '$FUNC' with 'shell=True'. This is dangerous because this call will spawn
    the command using a shell process. Doing so propagates current shell settings and variables, which
    makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.
  metadata:
    cwe: "CWE-78: Improper Neutralization of Special Elements used in an OS Command
      ('OS Command Injection')"
    owasp: "A1: Injection"
    primary_identifier: "bandit.B602"
    secondary_identifiers:
    - name: "Bandit Test ID B602"
      type: "bandit_test_id"
      value: "B602"
  severity: ERROR
  languages: [python]
# source (modified): https://github.com/returntocorp/semgrep-rules/blob/develop/python/lang/security/audit/dangerous-system-call.yaml
# dangerous-system-call
- id: bandit.B603
  patterns:
    - pattern-not: "subprocess.$FUNC($ARG, shell=<... True ...>)"
    - pattern-not: "subprocess.$FUNC($ARG, shell=<... 'True' ...>)"
    - pattern-not: "subprocess.$FUNC($ARG, shell=<... \"True\" ...>)"
    - pattern-either:
      - pattern: |
          subprocess.$FUNC($ARG, shell=False)
      - pattern: |
          subprocess.$FUNC($ARG, shell=0)
      - pattern: |
          subprocess.$FUNC($ARG, shell={...})
      - pattern: |
          subprocess.$FUNC($ARG, shell=[...])
      - pattern: |
          subprocess.$FUNC($ARG)
  message: |
    Python possesses many mechanisms to invoke an external executable. However,
    doing so may present a security issue if appropriate care is not taken to
    sanitize any user provided or variable input. This plugin test is part of a
    family of tests built to check for process spawning and warn appropriately.
    Specifically, this test looks for the spawning of a subprocess without the
    use of a command shell. This type of subprocess invocation is not
    vulnerable to shell injection attacks, but care should still be taken to
    ensure validity of input.
  metadata:
    cwe: "CWE-78: Improper Neutralization of Special Elements used in an OS Command
      ('OS Command Injection')"
    owasp: "A1: Injection"
    primary_identifier: "bandit.B603"
    secondary_identifiers:
    - name: "Bandit Test ID B603"
      type: "bandit_test_id"
      value: "B603"
  severity: WARNING
  languages: [python]
- id: bandit.B604
  patterns:
    - pattern-not: subprocess.$FUNC(..., shell=True, ...)
    - pattern: $FOO(..., shell=True, ...)
  message: |
    subprocess call - check for execution of untrusted input
  metadata:
    cwe: "CWE-78: Improper Neutralization of Special Elements used in an OS Command
      ('OS Command Injection')"
    owasp: "A1: Injection"
    primary_identifier: "bandit.B604"
    secondary_identifiers:
    - name: "Bandit Test ID B604"
      type: "bandit_test_id"
      value: "B604"
  severity: INFO
  languages: [python]
- id: bandit.B605
  patterns:
    - pattern-either:
      - pattern: os.system(...)
      - pattern: os.popen(...)
      - pattern: os.popen2(...)
      - pattern: os.popen3(...)
      - pattern: os.popen4(...)
      - pattern: popen2.popen2(...)
      - pattern: popen2.popen3(...)
      - pattern: popen2.popen4(...)
      - pattern: popen2.Popen3(...)
      - pattern: popen2.Popen4(...)
      - pattern: commands.getoutput(...)
      - pattern: commands.getstatusoutput("")
  message: |
    Starting a process with a shell: Seems safe, but may be changed in the
    future, consider rewriting without shell
  metadata:
    cwe: "CWE-78: Improper Neutralization of Special Elements used in an OS Command
      ('OS Command Injection')"
    owasp: "A1: Injection"
    primary_identifier: "bandit.B605"
    secondary_identifiers:
    - name: "Bandit Test ID B605"
      type: "bandit_test_id"
      value: "B605"
  severity: INFO
  languages: [python]
# source (original): https://github.com/returntocorp/semgrep-rules/blob/develop/python/lang/security/audit/dangerous-spawn-process.yaml
# dangerous-spawn-process
- id: bandit.B606
  patterns:
  - pattern-either:
    - patterns:
      - pattern-not: os.$W("...", ...)
      - pattern-either:
        - pattern: os.execl(...)
        - pattern: os.execle(...)
        - pattern: os.execlp(...)
        - pattern: os.execlpe(...)
        - pattern: os.execv(...)
        - pattern: os.execve(...)
        - pattern: os.execvp(...)
        - pattern: os.execvpe(...)
        - pattern: os.startfile(...)
    - patterns:
      - pattern-not: os.$W($MODE, "...", ...)
      - pattern-either:
        - pattern: os.spawnl(...)
        - pattern: os.spawnle(...)
        - pattern: os.spawnlp(...)
        - pattern: os.spawnlpe(...)
        - pattern: os.spawnv(...)
        - pattern: os.spawnve(...)
        - pattern: os.spawnvp(...)
        - pattern: os.spawnvpe(...)
  message: |
    Found dynamic content when spawning a process. This is dangerous if external
    data can reach this function call because it allows a malicious actor to
    execute commands. Ensure no external data reaches here.
  metadata:
    cwe: "CWE-78: Improper Neutralization of Special Elements used in an OS Command
      ('OS Command Injection')"
    owasp: "A1: Injection"
    primary_identifier: "bandit.B606"
    secondary_identifiers:
    - name: "Bandit Test ID B606"
      type: "bandit_test_id"
      value: "B606"
  severity: WARNING
  languages: [python]
- id: bandit.B607
  pattern-either:
    - pattern: os.system("...", ...)
    - pattern: $OS.popen("...", ...)
    - pattern: $OS.popen2("...", ...)
    - pattern: $OS.popen3("...", ...)
    - pattern: $OS.popen4("...", ...)
    - pattern: commands.getoutput("...", ...)
    - pattern: commands.getstatusoutput("...", ...)
  message: |
    Starting a process with a shell; seems safe, but may be changed in the future, consider
    rewriting without shell
  metadata:
    cwe: "CWE-78: Improper Neutralization of Special Elements used in an OS Command
      ('OS Command Injection')"
    owasp: "A1: Injection"
    primary_identifier: "bandit.B607"
    secondary_identifiers:
    - name: "Bandit Test ID B607"
      type: "bandit_test_id"
      value: "B607"
  severity: INFO
  languages: [python]
- id: "bandit.B508"
  pattern-either:
  - pattern: "pysnmp.hlapi.CommunityData(..., mpModel=0, ...)"
  - pattern: "pysnmp.hlapi.CommunityData(..., mpModel=1, ...)"
  message: |
    The use of SNMPv1 and SNMPv2 is insecure. You should use SNMPv3 if able.
  metadata:
    cwe: "CWE-319: Cleartext Transmission of Sensitive Information"
    primary_identifier: "bandit.B508"
    secondary_identifiers:
    - name: "Bandit Test ID B508"
      type: "bandit_test_id"
      value: "B508"
  severity: "WARNING"
  languages:
  - "python"
- id: "bandit.B509"
  pattern-either:
  - pattern: "pysnmp.hlapi.UsmUserData($ARG1, $ARG2)"
  - pattern: "pysnmp.hlapi.UsmUserData($ARG1)"
  - pattern: "pysnmp.hlapi.UsmUserData(...,'noAuthNoPriv',...)"
  - pattern: "pysnmp.hlapi.UsmUserData(...,'authNoPriv',...)"
  message: |
    You should not use SNMPv3 without encryption. noAuthNoPriv & authNoPriv is insecure
  metadata:
    cwe: "CWE-319: Cleartext Transmission of Sensitive Information"
    primary_identifier: "bandit.B509"
    secondary_identifiers:
    - name: "Bandit Test ID B509"
      type: "bandit_test_id"
      value: "B509"
  severity: "WARNING"
  languages:
  - "python"
# source (modified): https://github.com/returntocorp/semgrep-rules/blob/develop/python/lang/security/audit/formatted-sql-query.yaml
# formatted-sql-query
- id: bandit.B608
  patterns:
  - pattern-either:
    - pattern: $DB.execute("..." % ...)
    - pattern: $DB.execute("...".format(...))
    - pattern: $DB.execute(f"...")
    - pattern: $DB.execute("..." + $V + "...")
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $SQL = "..." % ...
            ...
        - pattern-inside: |
            $SQL = "...".format(...)
            ...
        - pattern-inside: |
            $SQL = f"...{$X}..."
            ...
      - pattern: $DB.execute($SQL)
  message: |
    Detected possible formatted SQL query. Use parameterized queries instead.
  metadata:
    cwe: "CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      ('SQL Injection')"
    owasp: "A1: Injection"
    primary_identifier: "bandit.B608"
    secondary_identifiers:
    - name: "Bandit Test ID B608"
      type: "bandit_test_id"
      value: "B608"
  severity: WARNING
  languages: [python]
# source (original): https://github.com/returntocorp/semgrep-rules/blob/develop/python/lang/security/audit/system-wildcard-detected.yaml
# system-wildcard-detected
- id: bandit.B609
  patterns:
  - pattern-either:
    - pattern-inside: os.system("...")
    - pattern-inside: os.popen("...")
    - pattern-inside: os.popen2("...")
    - pattern-inside: os.popen3("...")
    - pattern-inside: os.popen4("...")
    - pattern-inside: subprocess.$W(..., shell=True, ...)
  - pattern-regex: (tar|chmod|chown|rsync)(.*?)\*
  message: |
    Detected use of the wildcard character in a system call that spawns a shell.
    This subjects the wildcard to normal shell expansion, which can have unintended consequences
    if there exist any non-standard file names. Consider a file named '-e sh script.sh' -- this
    will execute a script when 'rsync' is called. See
    https://www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt
    for more information.
  metadata:
    cwe: "CWE-155: Improper Neutralization of Wildcards or Matching Symbols"
    owasp: "A1: Injection"
    primary_identifier: "bandit.B609"
    secondary_identifiers:
    - name: "Bandit Test ID B609"
      type: "bandit_test_id"
      value: "B609"
  severity: WARNING
  languages: [python]
# source (original): https://github.com/returntocorp/semgrep-rules/blob/develop/python/django/security/audit/query-set-extra.yaml
# avoid-query-set-extra
- id: bandit.B610
  patterns:
  - pattern: "$X.objects. ... .extra(..., $K = $V, ...)"
  - pattern-not-inside: |
      $V = ['...']
      ...
  - metavariable-pattern:
      metavariable: "$V"
      patterns:
      - pattern: "$V"
      - pattern-not: "[..., '...', ...]"
      - pattern-not: "{..., '...': '...', ...}"
      - pattern-not: "\"...\""
      - pattern-not: "[..., \"...\" % \"...\", ...]"
      - pattern-not: "{..., $L: \"...\" % \"...\", ...}"
      - pattern-not: "{..., $L: \"...\".format(\"...\"), ...}"
      - pattern-not: "[..., \"...\".format(\"...\"), ...]"
  message: |
    This is a last resort. You should be careful when using `QuerySet.extra` due
    to SQLi.
  metadata:
    cwe: "CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      ('SQL Injection')"
    owasp: "A1: Injection"
    primary_identifier: "bandit.B610"
    secondary_identifiers:
    - name: "Bandit Test ID B610"
      type: "bandit_test_id"
      value: "B610"
  severity: "ERROR"
  languages:
  - "python"
# source (original): https://github.com/returntocorp/semgrep-rules/blob/develop/python/django/security/audit/raw-query.yaml
# avoid-raw-sql
- id: bandit.B611
  patterns:
  - pattern-either:
    - pattern: $MODEL.objects.raw($QUERY, ...)
    - pattern: django.db.models.expressions.RawSQL(...)
  message: You should be very careful whenever you write raw SQL. Consider using Django ORM before raw SQL. See https://docs.djangoproject.com/en/3.0/topics/db/sql/#passing-parameters-into-raw
  metadata:
    cwe: "CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      ('SQL Injection')"
    owasp: "A1: Injection"
    primary_identifier: "bandit.B611"
    secondary_identifiers:
    - name: "Bandit Test ID B611"
      type: "bandit_test_id"
      value: "B611"
  severity: ERROR
  languages: [python]
# source (original): https://github.com/returntocorp/semgrep-rules/blob/develop/python/jinja2/security/audit/autoescape-disabled.yaml
# autoescape-disabled
- id: bandit.B701
  patterns:
  - pattern-not: jinja2.Environment(..., autoescape=True, ...)
  - pattern-not: jinja2.Environment(..., autoescape=jinja2.select_autoescape(...), ...)
  - pattern: jinja2.Environment(...)
  message: >-
    Detected a Jinja2 environment without autoescaping. Jinja2 does not autoescape by default.
    This is dangerous if you are rendering to a browser because this allows for cross-site
    scripting (XSS) attacks. If you are in a web context, enable autoescaping by setting
    'autoescape=True.' You may also consider using 'jinja2.select_autoescape()' to only enable
    automatic escaping for certain file extensions.
  metadata:
    cwe: "CWE-116: Improper Encoding or Escaping of Output"
    owasp: "A7: Cross-Site Scripting (XSS)"
    primary_identifier: "bandit.B701"
    secondary_identifiers:
    - name: "Bandit Test ID B701"
      type: "bandit_test_id"
      value: "B701"
  severity: WARNING
  languages: [python]
# source (original): https://github.com/returntocorp/semgrep-rules/blob/develop/python/lang/security/audit/mako-templates-detected.yaml
# mako-templates-detected
- id: bandit.B702
  pattern: mako.template.Template(...)
  message: |
    Mako templates do not provide a global HTML escaping mechanism.
    This means you must escape all sensitive data in your templates
    using '| u' for URL escaping or '| h' for HTML escaping.
    If you are using Mako to serve web content, consider using
    a system such as Jinja2 which enables global escaping.
  metadata:
    cwe: "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site
      Scripting')"
    owasp: "A7: Cross-Site Scripting (XSS)"
    primary_identifier: "bandit.B702"
    secondary_identifiers:
    - name: "Bandit Test ID B702"
      type: "bandit_test_id"
      value: "B702"
  severity: INFO
  languages: [python]

